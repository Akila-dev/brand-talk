import * as THREE from "three";
import React, { Suspense, useEffect, useRef, useState } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { Environment, useGLTF, ContactShadows } from "@react-three/drei";
import { useSpring } from "@react-spring/core";
import { a as three } from "@react-spring/three";
import { a as web } from "@react-spring/web";
import { useScroll, useTransform } from "framer-motion";
import { motion, MotionCanvas } from "framer-motion-3d";

import { CanvasLoader } from "../../components";

const getWindowsDimension = () => {
	const { innerWidth: width, innerHeight: height } = window;
	return {
		width,
		height,
	};
};

function Model({ open, hinge, ...props }) {
	const group = useRef();
	// Load model
	const { nodes, materials } = useGLTF("/macbook.glb");
	// Take care of cursor state on hover
	const [hovered, setHovered] = useState(false);
	useEffect(
		() => void (document.body.style.cursor = hovered ? "pointer" : "auto"),
		[hovered]
	);
	// Make it float in the air when it's opened
	useFrame((state) => {
		const t = state.clock.getElapsedTime();
		group.current.rotation.x = THREE.MathUtils.lerp(
			group.current.rotation.x,
			open ? Math.cos(t / 10) / 10 + 0.25 : 0,
			0.1
		);
		group.current.rotation.y = THREE.MathUtils.lerp(
			group.current.rotation.y,
			open ? Math.sin(t / 10) / 4 : 0,
			0.1
		);
		group.current.rotation.z = THREE.MathUtils.lerp(
			group.current.rotation.z,
			open ? Math.sin(t / 10) / 10 : 0,
			0.1
		);
		group.current.position.y = THREE.MathUtils.lerp(
			group.current.position.y,
			open ? (-2 + Math.sin(t)) / 3 : -0,
			0.1
		);
	});
	// The view was auto-generated by: https://github.com/pmndrs/gltfjsx
	// Events and spring animations were added afterwards
	return (
		<group
			ref={group}
			{...props}
			onPointerOver={(e) => (e.stopPropagation(), setHovered(true))}
			onPointerOut={(e) => setHovered(false)}
			dispose={null}
		>
			<three.group rotation-x={hinge} position={[0, -0.04, 0.41]}>
				<group position={[0, 2.96, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
					<mesh
						material={materials.aluminium}
						geometry={nodes["Cube008"].geometry}
					/>
					<mesh
						material={materials["matte.001"]}
						geometry={nodes["Cube008_1"].geometry}
					/>
					<mesh
						material={materials["screen.001"]}
						geometry={nodes["Cube008_2"].geometry}
					/>
				</group>
			</three.group>
			<mesh
				material={materials.keys}
				geometry={nodes.keyboard.geometry}
				position={[1.79, 0, 3.45]}
			/>
			<group position={[0, -0.1, 3.39]}>
				<mesh
					material={materials.aluminium}
					geometry={nodes["Cube002"].geometry}
				/>
				<mesh
					material={materials.trackpad}
					geometry={nodes["Cube002_1"].geometry}
				/>
			</group>
			<mesh
				material={materials.touchbar}
				geometry={nodes.touchbar.geometry}
				position={[0, -0.03, 1.2]}
			/>
		</group>
	);
}

const Laptop = ({ container }) => {
	const [screenSize, setScreenSize] = useState(getWindowsDimension());
	useEffect(() => {
		const handleResize = () => {
			setScreenSize(getWindowsDimension());
		};

		window.addEventListener("resize", handleResize);

		return () => window.removeEventListener("resize", handleResize);
	}, []);

	// This flag controls open state, alternates between true & false
	const [open, setOpen] = useState(false);
	// We turn this into a spring animation that interpolates between 0 and 1
	const props = useSpring({ open: Number(open) });

	const { scrollYProgress } = useScroll({
		target: container,
		offset: ["start end", "end end"],
	});

	const rotate = useTransform(scrollYProgress, [0.25, 1], [0, Math.PI * 2]);
	const scale = useTransform(
		scrollYProgress,
		[0, 1],
		[0.5, screenSize.width > 700 ? 2 : 1]
	);

	// const open = useTransform(
	// 	scrollYProgress,
	// 	[0, 1],
	// 	[0.5, screenSize.width > 700 ? 2 : 1]
	// );
	// const hinge = useTransform(scrollYProgress, [0, 1], [1.575, -0.425]);

	return (
		<div className="w-full h-screen">
			<Canvas dpr={[1, 2]} camera={{ position: [0, 0, -30], fov: 35 }}>
				<three.pointLight
					position={[10, 10, 10]}
					intensity={1.5}
					color={props.open.to([0, 1], ["#f0f0f0", "#d25578"])}
				/>
				<Suspense fallback={<CanvasLoader />}>
					<motion.group
						rotation={[0, rotate, 0]}
						onClick={(e) => (e.stopPropagation(), setOpen(!open))}
						scale={scale}
					>
						{/* <Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])} /> */}
						<Model open={open} hinge={props.open.to([0, 1], [1.575, -0.425])} />
					</motion.group>
					<Environment preset="city" />
				</Suspense>
				<ContactShadows
					position={[0, -4.5, 0]}
					opacity={0.4}
					scale={20}
					blur={1.75}
					far={4.5}
				/>
			</Canvas>
		</div>
	);
};

export default Laptop;
